{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","toFixed","FeedbackOptions","options","onLeaveFeedback","map","item","type","onClick","Section","title","children","className","Notification","message","App","state","onBtnCLick","option","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Object","keys","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAuBeA,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,qCACE,sCAASJ,KACT,yCAAYC,KACZ,qCAAQC,KACR,uCAAUC,KACV,mDAAsBC,EAAmBC,QAAQ,GAAjD,WCQSC,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,6BACGD,EAAQE,KAAI,SAAAC,GAAI,OACf,wBAAmBC,KAAK,SAASC,QAASJ,EAAgBE,GAA1D,SACGA,GADUA,SCIJG,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,sBAAKC,UAAU,YAAf,UACE,oBAAIA,UAAU,WAAd,SAA0BF,IACzBC,MCDUE,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,6BAAKA,KCkD5BC,E,4MA7CbC,MAAQ,CACNpB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPmB,WAAa,SAAAC,GAAM,OAAI,WACrB,EAAKC,UAAS,SAAAC,GAAS,sBAAQF,EAASE,EAAUF,GAAU,Q,EAG9DG,mBAAqB,WACnB,OAAO,EAAKL,MAAMpB,KAAO,EAAKoB,MAAMnB,QAAU,EAAKmB,MAAMlB,K,EAG3DwB,gCAAkC,WAChC,IAAMvB,EAAQ,EAAKsB,qBACnB,OAAQ,EAAKL,MAAMpB,KAAOG,EAAS,K,4CAGrC,WACE,IAAMmB,EAASK,OAAOC,KAAKC,KAAKT,OAEhC,OACE,qCACE,cAAC,EAAD,CAASN,MAAO,wBAAhB,SACE,cAAC,EAAD,CAAiBP,QAASe,EAAQd,gBAAiBqB,KAAKR,eAE3B,IAA9BQ,KAAKJ,qBACJ,cAAC,EAAD,CAAcP,QAAQ,sBAEtB,cAAC,EAAD,CAASJ,MAAO,aAAhB,SACE,cAAC,EAAD,CACEd,KAAM6B,KAAKT,MAAMpB,KACjBC,QAAS4B,KAAKT,MAAMnB,QACpBC,IAAK2B,KAAKT,MAAMlB,IAChBC,MAAO0B,KAAKJ,qBACZrB,mBAAoByB,KAAKH,6C,GArCrBI,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.545d133f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <>\n      <p>Good:{good}</p>\n      <p>Neutral:{neutral}</p>\n      <p>Bad:{bad}</p>\n      <p>Total:{total}</p>\n      <p>Positive feedback:{positivePercentage.toFixed(0)}%</p>\n    </>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <ul>\n    {options.map(item => (\n      <button key={item} type=\"button\" onClick={onLeaveFeedback(item)}>\n        {item}\n      </button>\n    ))}\n  </ul>\n);\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <div className=\"container\">\n    <h2 className=\"feedback\">{title}</h2>\n    {children}\n  </div>\n);\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <h3>{message}</h3>;\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport './App.css';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onBtnCLick = option => () => {\n    this.setState(prevState => ({ [option]: prevState[option] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    return (this.state.good / total) * 100;\n  };\n\n  render() {\n    const option = Object.keys(this.state);\n\n    return (\n      <>\n        <Section title={'Please leave feedback'}>\n          <FeedbackOptions options={option} onLeaveFeedback={this.onBtnCLick} />\n        </Section>\n        {this.countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Section title={'Statistics'}>\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}